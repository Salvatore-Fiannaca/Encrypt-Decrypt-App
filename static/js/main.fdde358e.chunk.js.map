{"version":3,"sources":["img/hide.png","img/show.png","App.tsx","Utils.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","message","setMessage","messageisValid","setValidMsg","key","setKey","keyisValid","setValidKey","btnCopyVisible","setBtnCopyVisible","showKey","setShowKey","changeHandler","e","target","type","value","length","className","rows","cn","onChange","onClick","preventDefault","src","showImg","hideImg","width","height","alt","len","randomKey","char","i","Math","floor","random","generateKey","createAdapter","setAlgorithm","EncryptionAlgorithm","CBC","setDerivationRounds","encrypt","then","res","toString","catch","decrypt","alert","txt","window","isSecureContext","navigator","clipboard","writeText","textArea","document","createElement","style","position","body","appendChild","focus","select","execCommand","removeChild","error","copyToClipboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fdde358e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hide.590d6ab3.png\";","export default __webpack_public_path__ + \"static/media/show.60712395.png\";","import { createAdapter, EncryptionAlgorithm } from \"iocane\";\r\nimport React, { MouseEvent, useState } from \"react\";\r\nimport cn from \"classnames\";\r\nimport { generateKey, copyToClipboard } from \"./Utils\";\r\nimport hideImg from \"./img/hide.png\";\r\nimport showImg from \"./img/show.png\";\r\n\r\nexport const App: React.FC = () => {\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [messageisValid, setValidMsg] = useState<boolean>(false);\r\n  const [key, setKey] = useState<string>(\"\");\r\n  const [keyisValid, setValidKey] = useState<boolean>(false);\r\n  const [btnCopyVisible, setBtnCopyVisible] = useState<boolean>(false);\r\n  const [showKey, setShowKey] = useState<boolean>(false);\r\n\r\n  function encrypt() {\r\n    if (key && message) {\r\n      createAdapter()\r\n        .setAlgorithm(EncryptionAlgorithm.CBC)\r\n        .setDerivationRounds(14)\r\n        .encrypt(message, key)\r\n        .then((res) => {\r\n          setMessage(res.toString());\r\n          setBtnCopyVisible(true);\r\n        })\r\n        .catch(() => {\r\n          setMessage(\"Something's gone wrong...\");\r\n        });\r\n    }\r\n  }\r\n  function decrypt() {\r\n    if (key && message) {\r\n      createAdapter()\r\n        .decrypt(message, key)\r\n        .then((res) => {\r\n          setMessage(res.toString());\r\n          setBtnCopyVisible(true);\r\n        })\r\n        .catch(() => {\r\n          alert(\"Cannot decrypt this message...\");\r\n        });\r\n    }\r\n  }\r\n  function reset() {\r\n    setBtnCopyVisible(false);\r\n    setValidKey(false);\r\n    setValidMsg(false);\r\n    setShowKey(false)\r\n    setMessage(\"\");\r\n    setKey(\"\");\r\n  }\r\n  function changeHandler(e: any) {\r\n    switch (e.target.type) {\r\n      case 'text':\r\n      case 'password':\r\n        setValidKey(e.target.value.length > 0);\r\n        setKey(e.target.value);\r\n        break;\r\n      case 'textarea':\r\n        setValidMsg(e.target.value.length > 0);\r\n        setMessage(e.target.value);\r\n        break;\r\n    }\r\n  }\r\n  function generateHandler(e: MouseEvent) {\r\n    e.preventDefault();\r\n    setKey(generateKey(12));\r\n    setShowKey(true)\r\n    setValidKey(true)\r\n  }\r\n  function copyHandler() {\r\n    copyToClipboard(message);\r\n  }\r\n  function showKeyHandler(e: MouseEvent){\r\n    e.preventDefault();\r\n    setShowKey(!showKey)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container top\">\r\n      <form>\r\n        <div className=\"form-group m-2\">\r\n          <label className=\"mb-2\">Paste your message here</label>\r\n          <textarea\r\n            rows={12}\r\n            className={cn(\r\n              \"form-control\",\r\n              { \"is-valid\": messageisValid },\r\n              { \"is-invalid\": !messageisValid }\r\n            )}\r\n            value={message}\r\n            onChange={changeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-4 m-2\">\r\n          <div className=\"row align-items-end\">\r\n            <div className=\"col-md-9\">\r\n              <label className=\"mb-2\">Protect with a key</label>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  className={cn(\r\n                    \"form-control input-group\",\r\n                    { \"is-valid\": keyisValid },\r\n                    { \"is-invalid\": !keyisValid }\r\n                  )}\r\n                  type={ showKey ? 'text' : 'password'}\r\n                  value={key}\r\n                  onChange={changeHandler}\r\n                />\r\n                  <span \r\n                  className=\"input-group-text img\"\r\n                  onClick={showKeyHandler}>\r\n                    <img\r\n                      src={ showKey ? showImg : hideImg}\r\n                      width=\"26em\"\r\n                      height=\"26em\"\r\n                      alt=\"show/hide key\"\r\n                    />\r\n                  </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-3\">\r\n              <button\r\n                className=\"btn btn-outline-secondary form-control\"\r\n                onClick={generateHandler}\r\n              >\r\n                Generate\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"container controls\">\r\n        <div className=\"row justify-content-center align-items-center\">\r\n          <div className=\"col-auto py-2\">\r\n            <button className=\"btn btn-outline-primary\" onClick={encrypt}>\r\n              Encrypt\r\n            </button>\r\n          </div>\r\n          <div className=\"col-auto py-2\">\r\n            <button className=\"btn btn-outline-primary\" onClick={decrypt}>\r\n              Decrypt\r\n            </button>\r\n          </div>\r\n\r\n          {(key !== \"\" || message !== \"\") && (\r\n            <div className=\"col-auto py-2\">\r\n              <button className=\"btn btn-outline-dark \" onClick={reset}>\r\n                Reset\r\n              </button>\r\n            </div>\r\n          )}\r\n          {message !== \"\" && btnCopyVisible && (\r\n            <div className=\"col-auto py-2\">\r\n              <button className=\"btn btn-success\" onClick={copyHandler}>\r\n                Copy to Clipboard\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export function generateKey(len: number = 8): string {\r\n    let randomKey: string = '';\r\n    const char : string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!Â£$%&/()=^?\";\r\n    for (let i = 0; i < len; i++) {\r\n      let randomChar: string = char[Math.floor(Math.random() * 64)];\r\n      randomKey +=  randomChar;\r\n    }\r\n    return randomKey\r\n}\r\n\r\nexport function copyToClipboard(txt : string) {\r\n  if (txt) {\r\n    try {\r\n      if (window.isSecureContext) {\r\n        return navigator.clipboard.writeText(txt)\r\n      }\r\n\r\n      var textArea = document.createElement(\"textarea\");\r\n      textArea.value = txt;\r\n      textArea.style.position = \"fixed\";\r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n      document.execCommand('copy')\r\n      document.body.removeChild(textArea)\r\n      \r\n    } catch (error) {\r\n      alert(\"Cannot copy to clipboard\")\r\n    } \r\n  }\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './app.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}